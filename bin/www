#!/usr/bin/env node
require('dotenv').config();
/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('bookadvisor:server');
const http = require('http');
const mongoose = require('mongoose');
const isProduction = 'production' === process.env.NODE_ENV;
/**
 * Mongoose connection
 */
const mongooseUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/BookAdvisor';
mongoose.connect(mongooseUri, { useNewUrlParser: true }).then(() => {
  console.log('MongoDB connection is established');
}).catch(err => console.log(err));

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, function () {
  if (!isProduction) {
    require('browser-sync')({
      files: ['../'],
      online: false,
      open: false,
      port: port + 1,
      proxy: 'localhost:' + port,
      ui: {
        port: 8080
      },
      reloadOnRestart: true
    });
  }
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
